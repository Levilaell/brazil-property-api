version: '3.8'

services:
  # API Application - Production Configuration
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - TESTING=False
      - ANALYTICS_ENABLED=true
      - RATE_LIMIT_STORAGE=redis
      - SENTRY_DSN=${SENTRY_DSN}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    networks:
      - brazil-property-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB - Production Configuration
  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./config/mongod.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf
    networks:
      - brazil-property-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis - Production Configuration
  redis:
    image: redis:7.2-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - brazil-property-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer - Production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - api
    networks:
      - brazil-property-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Log Management - Fluentd
  fluentd:
    build: ./config/fluentd
    volumes:
      - ./logs:/fluentd/log:ro
      - ./config/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    networks:
      - brazil-property-network
    restart: unless-stopped
    profiles:
      - logging

  # Backup Service
  backup:
    build: ./scripts/backup
    volumes:
      - mongodb_data:/backup/mongodb:ro
      - redis_data:/backup/redis:ro
      - ./backups:/backup/output:rw
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-"0 2 * * *"}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - brazil-property-network
    restart: unless-stopped
    profiles:
      - backup

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mongodb
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis

networks:
  brazil-property-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16