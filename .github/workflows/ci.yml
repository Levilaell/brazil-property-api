name: CI/CD Pipeline - Brazil Property API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
          MONGO_INITDB_DATABASE: brazil_property_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install coverage pytest-cov

    - name: Set up environment variables
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "MONGODB_URL=mongodb://admin:admin123@localhost:27017/brazil_property_test?authSource=admin" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "TESTING=True" >> $GITHUB_ENV

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -s http://localhost:27017; do sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost ping; do sleep 2; done'

    - name: Run linting
      run: |
        # Code formatting check
        black --check src/ tests/ || (echo "‚ùå Code formatting issues found. Run 'black src/ tests/' to fix." && exit 1)
        
        # Import sorting check
        isort --check-only src/ tests/ || (echo "‚ùå Import sorting issues found. Run 'isort src/ tests/' to fix." && exit 1)
        
        # Linting
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional

    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || echo "‚ö†Ô∏è  Security issues found"
        safety check --json || echo "‚ö†Ô∏è  Vulnerability issues found"

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --maxfail=5
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          bandit-report.json
          pytest-report.xml

  # Job 2: Build and Security Scan
  build:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-{{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging.brazil-property-api.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add staging deployment logic here
        # This could involve updating staging docker-compose, 
        # triggering deployment webhook, or using cloud provider CLI

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging..."
        # Add staging smoke tests here
        # curl -f https://staging.brazil-property-api.com/api/v1/health

  # Job 4: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: 
      name: production
      url: https://brazil-property-api.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add production deployment logic here

    - name: Run production smoke tests
      run: |
        echo "üß™ Running smoke tests on production..."
        # Add production smoke tests here

    - name: Create deployment notification
      if: always()
      run: |
        echo "üì¢ Sending deployment notification..."
        # Add Slack/Discord/Email notification logic here

  # Job 5: Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run load tests
      run: |
        echo "‚ö° Running performance tests..."
        # Add load testing with tools like k6, Artillery, or Locust
        # k6 run tests/performance/load-test.js

    - name: Archive performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: performance-results/